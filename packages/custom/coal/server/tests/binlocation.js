/* jshint -W079 */
/* Related to https://github.com/linnovate/mean/issues/898 */
'use strict';

/**
 * Module dependencies.
 */
var expect = require('expect.js'),
  mongoose = require('mongoose'),
  User = mongoose.model('User'),

  Warehouse = mongoose.model('Warehouse'),
  Binlocation = mongoose.model('Binlocation'),
  GoodReceipt = mongoose.model('GoodReceipt'),
  _ = require('lodash');

var Q = require('q');


/**
 * Globals
 */
var user;
var warehouse;
var bin;
var gNewBin;
var gChemicalAttrs = {
  Mar: 10,
  Mad: 12,
  Aad: 2,
  Ad: 3,
  Vad: 4,
  Vdaf: 5.5,
  FCad: 6,
  St_ad: 7,
  Qb_ad: 8,
  Qgr_d: 1,
  Qnet_v_ar: 12,
  Qnet_v_ar_cal: 3,

  power: 23,
  nitrogen: 54
};

var gChemicalAttrs2 = {
  Mar: 20,
  Mad: 12,
  Aad: 2,
  Ad: 3,
  Vad: 4,
  Vdaf: 5.5,
  FCad: 6,
  St_ad: 7,
  Qb_ad: 8,
  Qgr_d: 1,
  Qnet_v_ar: 12,
  Qnet_v_ar_cal: 3,

  power: 23,
  nitrogen: 54
};

var gChemicalAttrs3 = _.clone(gChemicalAttrs2);
gChemicalAttrs3.Mar = 15;

var newVal;

/**
 * Test Suites
 */
describe('Model Binlocation:', function() {
  // describe('Model Binlocation:', function() {
  before(function(done) {

    console.log('before binlocation');
    user = new User({
      name: 'Full name',
      email: 'test@test.com',
      username: 'user',
      password: 'password'
    });

    user.save(function() {
      warehouse = new Warehouse({
        creator: user,
        creatorName: user.name,
        name: '一期东',
        comment: '品质好'
      });

      warehouse.save(function() {
        
        done();
      });


    });

  });

  describe('Method Save', function() {
    it('should be able to create without problems', function(done) {
      bin = new Binlocation({
          creator: user,
          creatorName: user.name,
          name: '一期东陕煤',
          weight: 20,
          chemicalAttrs: gChemicalAttrs,
          warehouse: warehouse,
          warehouseName: warehouse.name,
          parentBin: null
        });
      return bin.save(function(err, saveObj) {
         console.log('saveObj:', saveObj);
        expect(err).to.be(null);
        done();
      });
    });

    it('should be able to findOne without problems', function(done) {
      Binlocation.findOne({
        // warehouse: warehouse
      // }).populate('creator').populate('warehouse').exec(function(err, qbin) {
     }).populate('creator').exec(function(err, qbin) {
        console.log('qbin.warehouse:', qbin.warehouse, ' qbin:', qbin);
        expect(err).to.be(null);
        expect(qbin.weight).to.equal(bin.weight);
        expect(qbin.creator.name).to.equal(user.name);
        expect(qbin.warehouseName).to.equal(warehouse.name);
        expect(qbin.chemicalAttrs.Mad).to.equal(gChemicalAttrs.Mad);
        done();
      });
      return;
    });

    it('should be able to findOne populate Warehouse', function(done) {
      Binlocation.findOne({}).populate('warehouse', 'name').exec(function(err, qbin) {
        // console.log('=qbin:', qbin);
        // console.log('=qbin.warehouse:', qbin.warehouse)
        expect(err).to.be(null);
        expect(qbin.warehouse.name).to.equal(warehouse.name);
        // expect(qbin.creator).to.equal(warehouse.name);
        done();
      });
      return;
    });

  });

  describe('Test Static Method', function() {
    it('should be able to updateBinManually', function(done) {
      Binlocation.findOne({
        status: 'new'
      }).exec(function(err, oldBin) {
        newVal = {
          creator: user,
          creatorName: user.name,
          weight: 25,
          chemicalAttrs: gChemicalAttrs,
        };

        var q = Binlocation.updateBinManually(oldBin, newVal);
        q.then(function(newBin) {
          console.log('finish updateBinManually');
          expect(newBin).property('weight', newVal.weight);
          expect(oldBin.status).to.equal('historyPre');
          done();
          gNewBin = newBin;

        }, function(err) {
          console.log('3222');
          expect({}).fail(err);
          done();
        });

      });

    });

    it('check data generated by updateBinManually', function(done) {
      console.log('check data generated by updateBin');
      var query = Binlocation.find({}).or([{
        status: 'historyPre'
      }, {
        status: 'historyPost'
      }]).populate('prevBin').sort('status');

      query.exec(function(err, historyBins) {
        // console.log('err:', err);
        // console.log('historyBins:', historyBins);
        expect(err).to.be(null);
        expect(historyBins).length(2);
        var historyPostBin = historyBins[0];
        var historyPreBin = historyBins[1];
        expect(historyPostBin.prevBin._id).to.eql(historyPreBin._id);
        expect(historyPostBin.weight).to.equal(newVal.weight);
        expect(historyPreBin.weight).to.equal(bin.weight);
        done();
      });
    });

    it('check getAllBinList', function(done) {
      console.log('check data getAllBinList');
      Binlocation.getAllBinList().then(function(binArrayList) {
        // console.log();
        expect(binArrayList).length(1);
        expect(binArrayList[0].weight).to.equal(newVal.weight);

      }, function(err) {
        console.log('err:', err);
        expect({}).fail(err);
      }).then(function() {
        done();
      });

    });

    it('create goodReceipt', function(done) {
      var goodReceipt = new GoodReceipt({
        receiveDate: new Date(),
        mineral: null,

        binName: gNewBin.name,
        mineralName: 'able2',

        bin: gNewBin,

        weight: 10,


        inputChemicalAttrs: gChemicalAttrs2,

        actualChemicalAttrs: gChemicalAttrs3,
        chemicalChecked: false,
        receiptChecked: false,
        creator: user,
      });

      goodReceipt.save(function(err, savedGoodReceipt, numberAffected) {
        // console.log('savedQuality:',savedQuality);
        console.log('numberAffected:', numberAffected);
        expect(err).to.be(null);
        expect(numberAffected).to.be(1);

        Q(savedGoodReceipt.receiptCheckPass())
          .then(function(saveObj) {

          }, function(err) {
            expect({}).fail(err);
          }).then(function() {
            done();
          });
      });

    });

    it('check bin weight', function(done) {
      console.log('check data getAllBinList');
      Binlocation.getAllBinList().then(function(binArrayList) {

          // console.log('========sdsd======= binArrayList[0].chemicalAttrs.Mar:',binArrayList[0].chemicalAttrs.Mar);
          // console.log('10*gChemicalAttrs2.Mar+25*gChemicalAttrs.Mar)/135:', (10*gChemicalAttrs2.Mar+25*gChemicalAttrs.Mar)/135);

          expect(binArrayList).length(1);
          expect(binArrayList[0].weight).to.be(10 + 25);
          expect(binArrayList[0].chemicalAttrs.Mar).to.be((10 * gChemicalAttrs2.Mar + 25 * gChemicalAttrs.Mar) / 35);
          done();

        }, function(err) {
          console.log('err:', err);
          expect({}).fail(err);
        })
        .catch(function(err) {
          console.log('54$$$$$$$$$$err:', err);
          done();
          // expect({}).fail(err);
        });
    });

    it('update goodReceipt', function(done) {
      GoodReceipt.findOne({
        receiptChecked: true
      }).exec(function(err, goodReceipt) {
        expect(err).to.be(null);

        Q(goodReceipt.chemicalCheckPass())
          .then(function(saveObj) {

          }, function(err) {
            expect({}).fail(err);
          }).then(function() {
            done();
          });
      });
    });

    it('check bin chemical data', function(done) {
      Binlocation.getAllBinList().then(function(binArrayList) {
          expect(binArrayList).length(1);
          expect(binArrayList[0].weight).to.be(10 + 25);
          // console.log('gChemicalAttrs3.Mar:',gChemicalAttrs3.Mar, ' gChemicalAttrs.Mar:',gChemicalAttrs.Mar);
          expect(binArrayList[0].chemicalAttrs.Mar).to.be((10 * gChemicalAttrs3.Mar + 25 * gChemicalAttrs.Mar) / 35);

          done();

        }, function(err) {
          console.log('err:', err);
          expect({}).fail(err);
        })
        .catch(function(err) {
          console.error('error:', err);
        });
    });
  });



  after(function(done) {
    console.log('after binlocation');
    GoodReceipt.remove({}, function() {

      Binlocation.remove({}, function() {
        warehouse.remove(function() {
          user.remove(done);
        });
      });
    });
  });

});